// source: alice_v1.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.alice_v1.Card', null, global);
goog.exportSymbol('proto.alice_v1.CardItem', null, global);
goog.exportSymbol('proto.alice_v1.CloneCardRequest', null, global);
goog.exportSymbol('proto.alice_v1.CloneCardResponse', null, global);
goog.exportSymbol('proto.alice_v1.CreateCardRequest', null, global);
goog.exportSymbol('proto.alice_v1.CreateCardResponse', null, global);
goog.exportSymbol('proto.alice_v1.CreateWorkspaceRequest', null, global);
goog.exportSymbol('proto.alice_v1.CreateWorkspaceResponse', null, global);
goog.exportSymbol('proto.alice_v1.ListCardItemsResponse', null, global);
goog.exportSymbol('proto.alice_v1.ListCardsResponse', null, global);
goog.exportSymbol('proto.alice_v1.ListWorkspacesResponse', null, global);
goog.exportSymbol('proto.alice_v1.Login0Request', null, global);
goog.exportSymbol('proto.alice_v1.Login0Response', null, global);
goog.exportSymbol('proto.alice_v1.Login1Request', null, global);
goog.exportSymbol('proto.alice_v1.Login1Response', null, global);
goog.exportSymbol('proto.alice_v1.RegistrationRequest', null, global);
goog.exportSymbol('proto.alice_v1.RegistrationRequest.CardItem', null, global);
goog.exportSymbol('proto.alice_v1.RegistrationRequest.CardWithItems', null, global);
goog.exportSymbol('proto.alice_v1.RegistrationRequest.User', null, global);
goog.exportSymbol('proto.alice_v1.RegistrationRequest.Workspace', null, global);
goog.exportSymbol('proto.alice_v1.SrpStage', null, global);
goog.exportSymbol('proto.alice_v1.UserWithWorkspace', null, global);
goog.exportSymbol('proto.alice_v1.WhoAmIResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.RegistrationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.alice_v1.RegistrationRequest.repeatedFields_, null);
};
goog.inherits(proto.alice_v1.RegistrationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.RegistrationRequest.displayName = 'proto.alice_v1.RegistrationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.RegistrationRequest.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alice_v1.RegistrationRequest.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.RegistrationRequest.User.displayName = 'proto.alice_v1.RegistrationRequest.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.RegistrationRequest.Workspace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alice_v1.RegistrationRequest.Workspace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.RegistrationRequest.Workspace.displayName = 'proto.alice_v1.RegistrationRequest.Workspace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.RegistrationRequest.CardItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alice_v1.RegistrationRequest.CardItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.RegistrationRequest.CardItem.displayName = 'proto.alice_v1.RegistrationRequest.CardItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.RegistrationRequest.CardWithItems = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.alice_v1.RegistrationRequest.CardWithItems.repeatedFields_, null);
};
goog.inherits(proto.alice_v1.RegistrationRequest.CardWithItems, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.RegistrationRequest.CardWithItems.displayName = 'proto.alice_v1.RegistrationRequest.CardWithItems';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.Login0Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alice_v1.Login0Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.Login0Request.displayName = 'proto.alice_v1.Login0Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.Login0Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alice_v1.Login0Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.Login0Response.displayName = 'proto.alice_v1.Login0Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.Login1Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alice_v1.Login1Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.Login1Request.displayName = 'proto.alice_v1.Login1Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.Login1Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alice_v1.Login1Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.Login1Response.displayName = 'proto.alice_v1.Login1Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.CreateWorkspaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alice_v1.CreateWorkspaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.CreateWorkspaceRequest.displayName = 'proto.alice_v1.CreateWorkspaceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.CreateWorkspaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alice_v1.CreateWorkspaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.CreateWorkspaceResponse.displayName = 'proto.alice_v1.CreateWorkspaceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.CreateCardRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.alice_v1.CreateCardRequest.repeatedFields_, null);
};
goog.inherits(proto.alice_v1.CreateCardRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.CreateCardRequest.displayName = 'proto.alice_v1.CreateCardRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.CreateCardResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alice_v1.CreateCardResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.CreateCardResponse.displayName = 'proto.alice_v1.CreateCardResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.CloneCardRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alice_v1.CloneCardRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.CloneCardRequest.displayName = 'proto.alice_v1.CloneCardRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.CloneCardResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alice_v1.CloneCardResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.CloneCardResponse.displayName = 'proto.alice_v1.CloneCardResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.ListWorkspacesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.alice_v1.ListWorkspacesResponse.repeatedFields_, null);
};
goog.inherits(proto.alice_v1.ListWorkspacesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.ListWorkspacesResponse.displayName = 'proto.alice_v1.ListWorkspacesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.WhoAmIResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alice_v1.WhoAmIResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.WhoAmIResponse.displayName = 'proto.alice_v1.WhoAmIResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.Card = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.alice_v1.Card.repeatedFields_, null);
};
goog.inherits(proto.alice_v1.Card, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.Card.displayName = 'proto.alice_v1.Card';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.CardItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alice_v1.CardItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.CardItem.displayName = 'proto.alice_v1.CardItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.UserWithWorkspace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alice_v1.UserWithWorkspace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.UserWithWorkspace.displayName = 'proto.alice_v1.UserWithWorkspace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.ListCardsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.alice_v1.ListCardsResponse.repeatedFields_, null);
};
goog.inherits(proto.alice_v1.ListCardsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.ListCardsResponse.displayName = 'proto.alice_v1.ListCardsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alice_v1.ListCardItemsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.alice_v1.ListCardItemsResponse.repeatedFields_, null);
};
goog.inherits(proto.alice_v1.ListCardItemsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alice_v1.ListCardItemsResponse.displayName = 'proto.alice_v1.ListCardItemsResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.alice_v1.RegistrationRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.RegistrationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.RegistrationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.RegistrationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.RegistrationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.alice_v1.RegistrationRequest.User.toObject(includeInstance, f),
    workspace: (f = msg.getWorkspace()) && proto.alice_v1.RegistrationRequest.Workspace.toObject(includeInstance, f),
    cardWithItemsList: jspb.Message.toObjectList(msg.getCardWithItemsList(),
    proto.alice_v1.RegistrationRequest.CardWithItems.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.RegistrationRequest}
 */
proto.alice_v1.RegistrationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.RegistrationRequest;
  return proto.alice_v1.RegistrationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.RegistrationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.RegistrationRequest}
 */
proto.alice_v1.RegistrationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.alice_v1.RegistrationRequest.User;
      reader.readMessage(value,proto.alice_v1.RegistrationRequest.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = new proto.alice_v1.RegistrationRequest.Workspace;
      reader.readMessage(value,proto.alice_v1.RegistrationRequest.Workspace.deserializeBinaryFromReader);
      msg.setWorkspace(value);
      break;
    case 3:
      var value = new proto.alice_v1.RegistrationRequest.CardWithItems;
      reader.readMessage(value,proto.alice_v1.RegistrationRequest.CardWithItems.deserializeBinaryFromReader);
      msg.addCardWithItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.RegistrationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.RegistrationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.RegistrationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.RegistrationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.alice_v1.RegistrationRequest.User.serializeBinaryToWriter
    );
  }
  f = message.getWorkspace();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.alice_v1.RegistrationRequest.Workspace.serializeBinaryToWriter
    );
  }
  f = message.getCardWithItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.alice_v1.RegistrationRequest.CardWithItems.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.RegistrationRequest.User.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.RegistrationRequest.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.RegistrationRequest.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.RegistrationRequest.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    ver: jspb.Message.getFieldWithDefault(msg, 1, 0),
    identity: jspb.Message.getFieldWithDefault(msg, 2, ""),
    verifier: msg.getVerifier_asB64(),
    srpSalt: msg.getSrpSalt_asB64(),
    passwdSalt: msg.getPasswdSalt_asB64(),
    privKeyEnc: msg.getPrivKeyEnc_asB64(),
    pubkey: msg.getPubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.RegistrationRequest.User}
 */
proto.alice_v1.RegistrationRequest.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.RegistrationRequest.User;
  return proto.alice_v1.RegistrationRequest.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.RegistrationRequest.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.RegistrationRequest.User}
 */
proto.alice_v1.RegistrationRequest.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentity(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVerifier(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSrpSalt(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPasswdSalt(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrivKeyEnc(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.RegistrationRequest.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.RegistrationRequest.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.RegistrationRequest.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.RegistrationRequest.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVer();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIdentity();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVerifier_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSrpSalt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPasswdSalt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getPrivKeyEnc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional int32 ver = 1;
 * @return {number}
 */
proto.alice_v1.RegistrationRequest.User.prototype.getVer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.alice_v1.RegistrationRequest.User} returns this
 */
proto.alice_v1.RegistrationRequest.User.prototype.setVer = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string identity = 2;
 * @return {string}
 */
proto.alice_v1.RegistrationRequest.User.prototype.getIdentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.alice_v1.RegistrationRequest.User} returns this
 */
proto.alice_v1.RegistrationRequest.User.prototype.setIdentity = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes verifier = 3;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.RegistrationRequest.User.prototype.getVerifier = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes verifier = 3;
 * This is a type-conversion wrapper around `getVerifier()`
 * @return {string}
 */
proto.alice_v1.RegistrationRequest.User.prototype.getVerifier_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVerifier()));
};


/**
 * optional bytes verifier = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVerifier()`
 * @return {!Uint8Array}
 */
proto.alice_v1.RegistrationRequest.User.prototype.getVerifier_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVerifier()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.RegistrationRequest.User} returns this
 */
proto.alice_v1.RegistrationRequest.User.prototype.setVerifier = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes srp_salt = 4;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.RegistrationRequest.User.prototype.getSrpSalt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes srp_salt = 4;
 * This is a type-conversion wrapper around `getSrpSalt()`
 * @return {string}
 */
proto.alice_v1.RegistrationRequest.User.prototype.getSrpSalt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSrpSalt()));
};


/**
 * optional bytes srp_salt = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSrpSalt()`
 * @return {!Uint8Array}
 */
proto.alice_v1.RegistrationRequest.User.prototype.getSrpSalt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSrpSalt()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.RegistrationRequest.User} returns this
 */
proto.alice_v1.RegistrationRequest.User.prototype.setSrpSalt = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes passwd_salt = 5;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.RegistrationRequest.User.prototype.getPasswdSalt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes passwd_salt = 5;
 * This is a type-conversion wrapper around `getPasswdSalt()`
 * @return {string}
 */
proto.alice_v1.RegistrationRequest.User.prototype.getPasswdSalt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPasswdSalt()));
};


/**
 * optional bytes passwd_salt = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPasswdSalt()`
 * @return {!Uint8Array}
 */
proto.alice_v1.RegistrationRequest.User.prototype.getPasswdSalt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPasswdSalt()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.RegistrationRequest.User} returns this
 */
proto.alice_v1.RegistrationRequest.User.prototype.setPasswdSalt = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes priv_key_enc = 6;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.RegistrationRequest.User.prototype.getPrivKeyEnc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes priv_key_enc = 6;
 * This is a type-conversion wrapper around `getPrivKeyEnc()`
 * @return {string}
 */
proto.alice_v1.RegistrationRequest.User.prototype.getPrivKeyEnc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrivKeyEnc()));
};


/**
 * optional bytes priv_key_enc = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrivKeyEnc()`
 * @return {!Uint8Array}
 */
proto.alice_v1.RegistrationRequest.User.prototype.getPrivKeyEnc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrivKeyEnc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.RegistrationRequest.User} returns this
 */
proto.alice_v1.RegistrationRequest.User.prototype.setPrivKeyEnc = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes pubKey = 7;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.RegistrationRequest.User.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes pubKey = 7;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.alice_v1.RegistrationRequest.User.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubKey = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.alice_v1.RegistrationRequest.User.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.RegistrationRequest.User} returns this
 */
proto.alice_v1.RegistrationRequest.User.prototype.setPubkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.RegistrationRequest.Workspace.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.RegistrationRequest.Workspace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.RegistrationRequest.Workspace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.RegistrationRequest.Workspace.toObject = function(includeInstance, msg) {
  var f, obj = {
    aedKeyEnc: msg.getAedKeyEnc_asB64(),
    titleEnc: msg.getTitleEnc_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.RegistrationRequest.Workspace}
 */
proto.alice_v1.RegistrationRequest.Workspace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.RegistrationRequest.Workspace;
  return proto.alice_v1.RegistrationRequest.Workspace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.RegistrationRequest.Workspace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.RegistrationRequest.Workspace}
 */
proto.alice_v1.RegistrationRequest.Workspace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAedKeyEnc(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTitleEnc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.RegistrationRequest.Workspace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.RegistrationRequest.Workspace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.RegistrationRequest.Workspace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.RegistrationRequest.Workspace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAedKeyEnc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTitleEnc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes aed_key_enc = 1;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.RegistrationRequest.Workspace.prototype.getAedKeyEnc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes aed_key_enc = 1;
 * This is a type-conversion wrapper around `getAedKeyEnc()`
 * @return {string}
 */
proto.alice_v1.RegistrationRequest.Workspace.prototype.getAedKeyEnc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAedKeyEnc()));
};


/**
 * optional bytes aed_key_enc = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAedKeyEnc()`
 * @return {!Uint8Array}
 */
proto.alice_v1.RegistrationRequest.Workspace.prototype.getAedKeyEnc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAedKeyEnc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.RegistrationRequest.Workspace} returns this
 */
proto.alice_v1.RegistrationRequest.Workspace.prototype.setAedKeyEnc = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes title_enc = 2;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.RegistrationRequest.Workspace.prototype.getTitleEnc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes title_enc = 2;
 * This is a type-conversion wrapper around `getTitleEnc()`
 * @return {string}
 */
proto.alice_v1.RegistrationRequest.Workspace.prototype.getTitleEnc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTitleEnc()));
};


/**
 * optional bytes title_enc = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTitleEnc()`
 * @return {!Uint8Array}
 */
proto.alice_v1.RegistrationRequest.Workspace.prototype.getTitleEnc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTitleEnc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.RegistrationRequest.Workspace} returns this
 */
proto.alice_v1.RegistrationRequest.Workspace.prototype.setTitleEnc = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.RegistrationRequest.CardItem.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.RegistrationRequest.CardItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.RegistrationRequest.CardItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.RegistrationRequest.CardItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    titleEnc: msg.getTitleEnc_asB64(),
    bodyEnc: msg.getBodyEnc_asB64(),
    hidden: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.RegistrationRequest.CardItem}
 */
proto.alice_v1.RegistrationRequest.CardItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.RegistrationRequest.CardItem;
  return proto.alice_v1.RegistrationRequest.CardItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.RegistrationRequest.CardItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.RegistrationRequest.CardItem}
 */
proto.alice_v1.RegistrationRequest.CardItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTitleEnc(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBodyEnc(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHidden(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.RegistrationRequest.CardItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.RegistrationRequest.CardItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.RegistrationRequest.CardItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.RegistrationRequest.CardItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitleEnc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBodyEnc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getHidden();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bytes title_enc = 1;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.RegistrationRequest.CardItem.prototype.getTitleEnc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes title_enc = 1;
 * This is a type-conversion wrapper around `getTitleEnc()`
 * @return {string}
 */
proto.alice_v1.RegistrationRequest.CardItem.prototype.getTitleEnc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTitleEnc()));
};


/**
 * optional bytes title_enc = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTitleEnc()`
 * @return {!Uint8Array}
 */
proto.alice_v1.RegistrationRequest.CardItem.prototype.getTitleEnc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTitleEnc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.RegistrationRequest.CardItem} returns this
 */
proto.alice_v1.RegistrationRequest.CardItem.prototype.setTitleEnc = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes body_enc = 2;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.RegistrationRequest.CardItem.prototype.getBodyEnc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes body_enc = 2;
 * This is a type-conversion wrapper around `getBodyEnc()`
 * @return {string}
 */
proto.alice_v1.RegistrationRequest.CardItem.prototype.getBodyEnc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBodyEnc()));
};


/**
 * optional bytes body_enc = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBodyEnc()`
 * @return {!Uint8Array}
 */
proto.alice_v1.RegistrationRequest.CardItem.prototype.getBodyEnc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBodyEnc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.RegistrationRequest.CardItem} returns this
 */
proto.alice_v1.RegistrationRequest.CardItem.prototype.setBodyEnc = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bool hidden = 3;
 * @return {boolean}
 */
proto.alice_v1.RegistrationRequest.CardItem.prototype.getHidden = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.alice_v1.RegistrationRequest.CardItem} returns this
 */
proto.alice_v1.RegistrationRequest.CardItem.prototype.setHidden = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.alice_v1.RegistrationRequest.CardWithItems.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.RegistrationRequest.CardWithItems.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.RegistrationRequest.CardWithItems.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.RegistrationRequest.CardWithItems} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.RegistrationRequest.CardWithItems.toObject = function(includeInstance, msg) {
  var f, obj = {
    titleEnc: msg.getTitleEnc_asB64(),
    tagsEncList: msg.getTagsEncList_asB64(),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.alice_v1.RegistrationRequest.CardItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.RegistrationRequest.CardWithItems}
 */
proto.alice_v1.RegistrationRequest.CardWithItems.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.RegistrationRequest.CardWithItems;
  return proto.alice_v1.RegistrationRequest.CardWithItems.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.RegistrationRequest.CardWithItems} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.RegistrationRequest.CardWithItems}
 */
proto.alice_v1.RegistrationRequest.CardWithItems.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTitleEnc(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTagsEnc(value);
      break;
    case 3:
      var value = new proto.alice_v1.RegistrationRequest.CardItem;
      reader.readMessage(value,proto.alice_v1.RegistrationRequest.CardItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.RegistrationRequest.CardWithItems.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.RegistrationRequest.CardWithItems.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.RegistrationRequest.CardWithItems} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.RegistrationRequest.CardWithItems.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitleEnc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTagsEncList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.alice_v1.RegistrationRequest.CardItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes title_enc = 1;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.RegistrationRequest.CardWithItems.prototype.getTitleEnc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes title_enc = 1;
 * This is a type-conversion wrapper around `getTitleEnc()`
 * @return {string}
 */
proto.alice_v1.RegistrationRequest.CardWithItems.prototype.getTitleEnc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTitleEnc()));
};


/**
 * optional bytes title_enc = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTitleEnc()`
 * @return {!Uint8Array}
 */
proto.alice_v1.RegistrationRequest.CardWithItems.prototype.getTitleEnc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTitleEnc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.RegistrationRequest.CardWithItems} returns this
 */
proto.alice_v1.RegistrationRequest.CardWithItems.prototype.setTitleEnc = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes tags_enc = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.alice_v1.RegistrationRequest.CardWithItems.prototype.getTagsEncList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes tags_enc = 2;
 * This is a type-conversion wrapper around `getTagsEncList()`
 * @return {!Array<string>}
 */
proto.alice_v1.RegistrationRequest.CardWithItems.prototype.getTagsEncList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTagsEncList()));
};


/**
 * repeated bytes tags_enc = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTagsEncList()`
 * @return {!Array<!Uint8Array>}
 */
proto.alice_v1.RegistrationRequest.CardWithItems.prototype.getTagsEncList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTagsEncList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.alice_v1.RegistrationRequest.CardWithItems} returns this
 */
proto.alice_v1.RegistrationRequest.CardWithItems.prototype.setTagsEncList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.alice_v1.RegistrationRequest.CardWithItems} returns this
 */
proto.alice_v1.RegistrationRequest.CardWithItems.prototype.addTagsEnc = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.alice_v1.RegistrationRequest.CardWithItems} returns this
 */
proto.alice_v1.RegistrationRequest.CardWithItems.prototype.clearTagsEncList = function() {
  return this.setTagsEncList([]);
};


/**
 * repeated CardItem items = 3;
 * @return {!Array<!proto.alice_v1.RegistrationRequest.CardItem>}
 */
proto.alice_v1.RegistrationRequest.CardWithItems.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.alice_v1.RegistrationRequest.CardItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.alice_v1.RegistrationRequest.CardItem, 3));
};


/**
 * @param {!Array<!proto.alice_v1.RegistrationRequest.CardItem>} value
 * @return {!proto.alice_v1.RegistrationRequest.CardWithItems} returns this
*/
proto.alice_v1.RegistrationRequest.CardWithItems.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.alice_v1.RegistrationRequest.CardItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.alice_v1.RegistrationRequest.CardItem}
 */
proto.alice_v1.RegistrationRequest.CardWithItems.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.alice_v1.RegistrationRequest.CardItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.alice_v1.RegistrationRequest.CardWithItems} returns this
 */
proto.alice_v1.RegistrationRequest.CardWithItems.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * optional User user = 1;
 * @return {?proto.alice_v1.RegistrationRequest.User}
 */
proto.alice_v1.RegistrationRequest.prototype.getUser = function() {
  return /** @type{?proto.alice_v1.RegistrationRequest.User} */ (
    jspb.Message.getWrapperField(this, proto.alice_v1.RegistrationRequest.User, 1));
};


/**
 * @param {?proto.alice_v1.RegistrationRequest.User|undefined} value
 * @return {!proto.alice_v1.RegistrationRequest} returns this
*/
proto.alice_v1.RegistrationRequest.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.alice_v1.RegistrationRequest} returns this
 */
proto.alice_v1.RegistrationRequest.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.alice_v1.RegistrationRequest.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Workspace workspace = 2;
 * @return {?proto.alice_v1.RegistrationRequest.Workspace}
 */
proto.alice_v1.RegistrationRequest.prototype.getWorkspace = function() {
  return /** @type{?proto.alice_v1.RegistrationRequest.Workspace} */ (
    jspb.Message.getWrapperField(this, proto.alice_v1.RegistrationRequest.Workspace, 2));
};


/**
 * @param {?proto.alice_v1.RegistrationRequest.Workspace|undefined} value
 * @return {!proto.alice_v1.RegistrationRequest} returns this
*/
proto.alice_v1.RegistrationRequest.prototype.setWorkspace = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.alice_v1.RegistrationRequest} returns this
 */
proto.alice_v1.RegistrationRequest.prototype.clearWorkspace = function() {
  return this.setWorkspace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.alice_v1.RegistrationRequest.prototype.hasWorkspace = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated CardWithItems card_with_items = 3;
 * @return {!Array<!proto.alice_v1.RegistrationRequest.CardWithItems>}
 */
proto.alice_v1.RegistrationRequest.prototype.getCardWithItemsList = function() {
  return /** @type{!Array<!proto.alice_v1.RegistrationRequest.CardWithItems>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.alice_v1.RegistrationRequest.CardWithItems, 3));
};


/**
 * @param {!Array<!proto.alice_v1.RegistrationRequest.CardWithItems>} value
 * @return {!proto.alice_v1.RegistrationRequest} returns this
*/
proto.alice_v1.RegistrationRequest.prototype.setCardWithItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.alice_v1.RegistrationRequest.CardWithItems=} opt_value
 * @param {number=} opt_index
 * @return {!proto.alice_v1.RegistrationRequest.CardWithItems}
 */
proto.alice_v1.RegistrationRequest.prototype.addCardWithItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.alice_v1.RegistrationRequest.CardWithItems, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.alice_v1.RegistrationRequest} returns this
 */
proto.alice_v1.RegistrationRequest.prototype.clearCardWithItemsList = function() {
  return this.setCardWithItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.Login0Request.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.Login0Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.Login0Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.Login0Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    identity: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.Login0Request}
 */
proto.alice_v1.Login0Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.Login0Request;
  return proto.alice_v1.Login0Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.Login0Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.Login0Request}
 */
proto.alice_v1.Login0Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.Login0Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.Login0Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.Login0Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.Login0Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string identity = 1;
 * @return {string}
 */
proto.alice_v1.Login0Request.prototype.getIdentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.alice_v1.Login0Request} returns this
 */
proto.alice_v1.Login0Request.prototype.setIdentity = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.Login0Response.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.Login0Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.Login0Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.Login0Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    mutual: msg.getMutual_asB64(),
    salt: msg.getSalt_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.Login0Response}
 */
proto.alice_v1.Login0Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.Login0Response;
  return proto.alice_v1.Login0Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.Login0Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.Login0Response}
 */
proto.alice_v1.Login0Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMutual(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSalt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.Login0Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.Login0Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.Login0Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.Login0Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMutual_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSalt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes mutual = 1;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.Login0Response.prototype.getMutual = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes mutual = 1;
 * This is a type-conversion wrapper around `getMutual()`
 * @return {string}
 */
proto.alice_v1.Login0Response.prototype.getMutual_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMutual()));
};


/**
 * optional bytes mutual = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMutual()`
 * @return {!Uint8Array}
 */
proto.alice_v1.Login0Response.prototype.getMutual_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMutual()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.Login0Response} returns this
 */
proto.alice_v1.Login0Response.prototype.setMutual = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes salt = 2;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.Login0Response.prototype.getSalt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes salt = 2;
 * This is a type-conversion wrapper around `getSalt()`
 * @return {string}
 */
proto.alice_v1.Login0Response.prototype.getSalt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSalt()));
};


/**
 * optional bytes salt = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSalt()`
 * @return {!Uint8Array}
 */
proto.alice_v1.Login0Response.prototype.getSalt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSalt()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.Login0Response} returns this
 */
proto.alice_v1.Login0Response.prototype.setSalt = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.Login1Request.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.Login1Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.Login1Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.Login1Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    mutual: msg.getMutual_asB64(),
    proof: msg.getProof_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.Login1Request}
 */
proto.alice_v1.Login1Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.Login1Request;
  return proto.alice_v1.Login1Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.Login1Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.Login1Request}
 */
proto.alice_v1.Login1Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMutual(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.Login1Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.Login1Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.Login1Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.Login1Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMutual_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes mutual = 1;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.Login1Request.prototype.getMutual = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes mutual = 1;
 * This is a type-conversion wrapper around `getMutual()`
 * @return {string}
 */
proto.alice_v1.Login1Request.prototype.getMutual_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMutual()));
};


/**
 * optional bytes mutual = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMutual()`
 * @return {!Uint8Array}
 */
proto.alice_v1.Login1Request.prototype.getMutual_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMutual()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.Login1Request} returns this
 */
proto.alice_v1.Login1Request.prototype.setMutual = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes proof = 2;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.Login1Request.prototype.getProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes proof = 2;
 * This is a type-conversion wrapper around `getProof()`
 * @return {string}
 */
proto.alice_v1.Login1Request.prototype.getProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProof()));
};


/**
 * optional bytes proof = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProof()`
 * @return {!Uint8Array}
 */
proto.alice_v1.Login1Request.prototype.getProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.Login1Request} returns this
 */
proto.alice_v1.Login1Request.prototype.setProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.Login1Response.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.Login1Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.Login1Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.Login1Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    proof: msg.getProof_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.Login1Response}
 */
proto.alice_v1.Login1Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.Login1Response;
  return proto.alice_v1.Login1Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.Login1Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.Login1Response}
 */
proto.alice_v1.Login1Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.Login1Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.Login1Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.Login1Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.Login1Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes proof = 1;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.Login1Response.prototype.getProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes proof = 1;
 * This is a type-conversion wrapper around `getProof()`
 * @return {string}
 */
proto.alice_v1.Login1Response.prototype.getProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProof()));
};


/**
 * optional bytes proof = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProof()`
 * @return {!Uint8Array}
 */
proto.alice_v1.Login1Response.prototype.getProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.Login1Response} returns this
 */
proto.alice_v1.Login1Response.prototype.setProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.CreateWorkspaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.CreateWorkspaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.CreateWorkspaceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.CreateWorkspaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    aedKeyEnc: msg.getAedKeyEnc_asB64(),
    aedKeyTag: msg.getAedKeyTag_asB64(),
    titleEnc: msg.getTitleEnc_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.CreateWorkspaceRequest}
 */
proto.alice_v1.CreateWorkspaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.CreateWorkspaceRequest;
  return proto.alice_v1.CreateWorkspaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.CreateWorkspaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.CreateWorkspaceRequest}
 */
proto.alice_v1.CreateWorkspaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAedKeyEnc(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAedKeyTag(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTitleEnc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.CreateWorkspaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.CreateWorkspaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.CreateWorkspaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.CreateWorkspaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAedKeyEnc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAedKeyTag_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTitleEnc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes aed_key_enc = 1;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.CreateWorkspaceRequest.prototype.getAedKeyEnc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes aed_key_enc = 1;
 * This is a type-conversion wrapper around `getAedKeyEnc()`
 * @return {string}
 */
proto.alice_v1.CreateWorkspaceRequest.prototype.getAedKeyEnc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAedKeyEnc()));
};


/**
 * optional bytes aed_key_enc = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAedKeyEnc()`
 * @return {!Uint8Array}
 */
proto.alice_v1.CreateWorkspaceRequest.prototype.getAedKeyEnc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAedKeyEnc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.CreateWorkspaceRequest} returns this
 */
proto.alice_v1.CreateWorkspaceRequest.prototype.setAedKeyEnc = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes aed_key_tag = 2;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.CreateWorkspaceRequest.prototype.getAedKeyTag = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes aed_key_tag = 2;
 * This is a type-conversion wrapper around `getAedKeyTag()`
 * @return {string}
 */
proto.alice_v1.CreateWorkspaceRequest.prototype.getAedKeyTag_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAedKeyTag()));
};


/**
 * optional bytes aed_key_tag = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAedKeyTag()`
 * @return {!Uint8Array}
 */
proto.alice_v1.CreateWorkspaceRequest.prototype.getAedKeyTag_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAedKeyTag()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.CreateWorkspaceRequest} returns this
 */
proto.alice_v1.CreateWorkspaceRequest.prototype.setAedKeyTag = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes title_enc = 3;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.CreateWorkspaceRequest.prototype.getTitleEnc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes title_enc = 3;
 * This is a type-conversion wrapper around `getTitleEnc()`
 * @return {string}
 */
proto.alice_v1.CreateWorkspaceRequest.prototype.getTitleEnc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTitleEnc()));
};


/**
 * optional bytes title_enc = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTitleEnc()`
 * @return {!Uint8Array}
 */
proto.alice_v1.CreateWorkspaceRequest.prototype.getTitleEnc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTitleEnc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.CreateWorkspaceRequest} returns this
 */
proto.alice_v1.CreateWorkspaceRequest.prototype.setTitleEnc = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.CreateWorkspaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.CreateWorkspaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.CreateWorkspaceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.CreateWorkspaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    workspace: (f = msg.getWorkspace()) && proto.alice_v1.UserWithWorkspace.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.CreateWorkspaceResponse}
 */
proto.alice_v1.CreateWorkspaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.CreateWorkspaceResponse;
  return proto.alice_v1.CreateWorkspaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.CreateWorkspaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.CreateWorkspaceResponse}
 */
proto.alice_v1.CreateWorkspaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.alice_v1.UserWithWorkspace;
      reader.readMessage(value,proto.alice_v1.UserWithWorkspace.deserializeBinaryFromReader);
      msg.setWorkspace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.CreateWorkspaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.CreateWorkspaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.CreateWorkspaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.CreateWorkspaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkspace();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.alice_v1.UserWithWorkspace.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserWithWorkspace workspace = 1;
 * @return {?proto.alice_v1.UserWithWorkspace}
 */
proto.alice_v1.CreateWorkspaceResponse.prototype.getWorkspace = function() {
  return /** @type{?proto.alice_v1.UserWithWorkspace} */ (
    jspb.Message.getWrapperField(this, proto.alice_v1.UserWithWorkspace, 1));
};


/**
 * @param {?proto.alice_v1.UserWithWorkspace|undefined} value
 * @return {!proto.alice_v1.CreateWorkspaceResponse} returns this
*/
proto.alice_v1.CreateWorkspaceResponse.prototype.setWorkspace = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.alice_v1.CreateWorkspaceResponse} returns this
 */
proto.alice_v1.CreateWorkspaceResponse.prototype.clearWorkspace = function() {
  return this.setWorkspace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.alice_v1.CreateWorkspaceResponse.prototype.hasWorkspace = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.alice_v1.CreateCardRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.CreateCardRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.CreateCardRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.CreateCardRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.CreateCardRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    card: (f = msg.getCard()) && proto.alice_v1.Card.toObject(includeInstance, f),
    cardItemsList: jspb.Message.toObjectList(msg.getCardItemsList(),
    proto.alice_v1.CardItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.CreateCardRequest}
 */
proto.alice_v1.CreateCardRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.CreateCardRequest;
  return proto.alice_v1.CreateCardRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.CreateCardRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.CreateCardRequest}
 */
proto.alice_v1.CreateCardRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.alice_v1.Card;
      reader.readMessage(value,proto.alice_v1.Card.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    case 2:
      var value = new proto.alice_v1.CardItem;
      reader.readMessage(value,proto.alice_v1.CardItem.deserializeBinaryFromReader);
      msg.addCardItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.CreateCardRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.CreateCardRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.CreateCardRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.CreateCardRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.alice_v1.Card.serializeBinaryToWriter
    );
  }
  f = message.getCardItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.alice_v1.CardItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional Card card = 1;
 * @return {?proto.alice_v1.Card}
 */
proto.alice_v1.CreateCardRequest.prototype.getCard = function() {
  return /** @type{?proto.alice_v1.Card} */ (
    jspb.Message.getWrapperField(this, proto.alice_v1.Card, 1));
};


/**
 * @param {?proto.alice_v1.Card|undefined} value
 * @return {!proto.alice_v1.CreateCardRequest} returns this
*/
proto.alice_v1.CreateCardRequest.prototype.setCard = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.alice_v1.CreateCardRequest} returns this
 */
proto.alice_v1.CreateCardRequest.prototype.clearCard = function() {
  return this.setCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.alice_v1.CreateCardRequest.prototype.hasCard = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CardItem card_items = 2;
 * @return {!Array<!proto.alice_v1.CardItem>}
 */
proto.alice_v1.CreateCardRequest.prototype.getCardItemsList = function() {
  return /** @type{!Array<!proto.alice_v1.CardItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.alice_v1.CardItem, 2));
};


/**
 * @param {!Array<!proto.alice_v1.CardItem>} value
 * @return {!proto.alice_v1.CreateCardRequest} returns this
*/
proto.alice_v1.CreateCardRequest.prototype.setCardItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.alice_v1.CardItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.alice_v1.CardItem}
 */
proto.alice_v1.CreateCardRequest.prototype.addCardItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.alice_v1.CardItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.alice_v1.CreateCardRequest} returns this
 */
proto.alice_v1.CreateCardRequest.prototype.clearCardItemsList = function() {
  return this.setCardItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.CreateCardResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.CreateCardResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.CreateCardResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.CreateCardResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    card: (f = msg.getCard()) && proto.alice_v1.Card.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.CreateCardResponse}
 */
proto.alice_v1.CreateCardResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.CreateCardResponse;
  return proto.alice_v1.CreateCardResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.CreateCardResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.CreateCardResponse}
 */
proto.alice_v1.CreateCardResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.alice_v1.Card;
      reader.readMessage(value,proto.alice_v1.Card.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.CreateCardResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.CreateCardResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.CreateCardResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.CreateCardResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.alice_v1.Card.serializeBinaryToWriter
    );
  }
};


/**
 * optional Card card = 1;
 * @return {?proto.alice_v1.Card}
 */
proto.alice_v1.CreateCardResponse.prototype.getCard = function() {
  return /** @type{?proto.alice_v1.Card} */ (
    jspb.Message.getWrapperField(this, proto.alice_v1.Card, 1));
};


/**
 * @param {?proto.alice_v1.Card|undefined} value
 * @return {!proto.alice_v1.CreateCardResponse} returns this
*/
proto.alice_v1.CreateCardResponse.prototype.setCard = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.alice_v1.CreateCardResponse} returns this
 */
proto.alice_v1.CreateCardResponse.prototype.clearCard = function() {
  return this.setCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.alice_v1.CreateCardResponse.prototype.hasCard = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.CloneCardRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.CloneCardRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.CloneCardRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.CloneCardRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    titleEnc: msg.getTitleEnc_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.CloneCardRequest}
 */
proto.alice_v1.CloneCardRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.CloneCardRequest;
  return proto.alice_v1.CloneCardRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.CloneCardRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.CloneCardRequest}
 */
proto.alice_v1.CloneCardRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTitleEnc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.CloneCardRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.CloneCardRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.CloneCardRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.CloneCardRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitleEnc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes title_enc = 1;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.CloneCardRequest.prototype.getTitleEnc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes title_enc = 1;
 * This is a type-conversion wrapper around `getTitleEnc()`
 * @return {string}
 */
proto.alice_v1.CloneCardRequest.prototype.getTitleEnc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTitleEnc()));
};


/**
 * optional bytes title_enc = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTitleEnc()`
 * @return {!Uint8Array}
 */
proto.alice_v1.CloneCardRequest.prototype.getTitleEnc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTitleEnc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.CloneCardRequest} returns this
 */
proto.alice_v1.CloneCardRequest.prototype.setTitleEnc = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.CloneCardResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.CloneCardResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.CloneCardResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.CloneCardResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    card: (f = msg.getCard()) && proto.alice_v1.Card.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.CloneCardResponse}
 */
proto.alice_v1.CloneCardResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.CloneCardResponse;
  return proto.alice_v1.CloneCardResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.CloneCardResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.CloneCardResponse}
 */
proto.alice_v1.CloneCardResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.alice_v1.Card;
      reader.readMessage(value,proto.alice_v1.Card.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.CloneCardResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.CloneCardResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.CloneCardResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.CloneCardResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.alice_v1.Card.serializeBinaryToWriter
    );
  }
};


/**
 * optional Card card = 1;
 * @return {?proto.alice_v1.Card}
 */
proto.alice_v1.CloneCardResponse.prototype.getCard = function() {
  return /** @type{?proto.alice_v1.Card} */ (
    jspb.Message.getWrapperField(this, proto.alice_v1.Card, 1));
};


/**
 * @param {?proto.alice_v1.Card|undefined} value
 * @return {!proto.alice_v1.CloneCardResponse} returns this
*/
proto.alice_v1.CloneCardResponse.prototype.setCard = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.alice_v1.CloneCardResponse} returns this
 */
proto.alice_v1.CloneCardResponse.prototype.clearCard = function() {
  return this.setCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.alice_v1.CloneCardResponse.prototype.hasCard = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.alice_v1.ListWorkspacesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.ListWorkspacesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.ListWorkspacesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.ListWorkspacesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.ListWorkspacesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.alice_v1.UserWithWorkspace.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.ListWorkspacesResponse}
 */
proto.alice_v1.ListWorkspacesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.ListWorkspacesResponse;
  return proto.alice_v1.ListWorkspacesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.ListWorkspacesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.ListWorkspacesResponse}
 */
proto.alice_v1.ListWorkspacesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.alice_v1.UserWithWorkspace;
      reader.readMessage(value,proto.alice_v1.UserWithWorkspace.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.ListWorkspacesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.ListWorkspacesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.ListWorkspacesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.ListWorkspacesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.alice_v1.UserWithWorkspace.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UserWithWorkspace items = 1;
 * @return {!Array<!proto.alice_v1.UserWithWorkspace>}
 */
proto.alice_v1.ListWorkspacesResponse.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.alice_v1.UserWithWorkspace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.alice_v1.UserWithWorkspace, 1));
};


/**
 * @param {!Array<!proto.alice_v1.UserWithWorkspace>} value
 * @return {!proto.alice_v1.ListWorkspacesResponse} returns this
*/
proto.alice_v1.ListWorkspacesResponse.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.alice_v1.UserWithWorkspace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.alice_v1.UserWithWorkspace}
 */
proto.alice_v1.ListWorkspacesResponse.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.alice_v1.UserWithWorkspace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.alice_v1.ListWorkspacesResponse} returns this
 */
proto.alice_v1.ListWorkspacesResponse.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.WhoAmIResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.WhoAmIResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.WhoAmIResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.WhoAmIResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    passwdSalt: msg.getPasswdSalt_asB64(),
    privKeyEnc: msg.getPrivKeyEnc_asB64(),
    pubKey: msg.getPubKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.WhoAmIResponse}
 */
proto.alice_v1.WhoAmIResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.WhoAmIResponse;
  return proto.alice_v1.WhoAmIResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.WhoAmIResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.WhoAmIResponse}
 */
proto.alice_v1.WhoAmIResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPasswdSalt(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrivKeyEnc(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.WhoAmIResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.WhoAmIResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.WhoAmIResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.WhoAmIResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPasswdSalt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPrivKeyEnc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPubKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.alice_v1.WhoAmIResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.alice_v1.WhoAmIResponse} returns this
 */
proto.alice_v1.WhoAmIResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes passwd_salt = 2;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.WhoAmIResponse.prototype.getPasswdSalt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes passwd_salt = 2;
 * This is a type-conversion wrapper around `getPasswdSalt()`
 * @return {string}
 */
proto.alice_v1.WhoAmIResponse.prototype.getPasswdSalt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPasswdSalt()));
};


/**
 * optional bytes passwd_salt = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPasswdSalt()`
 * @return {!Uint8Array}
 */
proto.alice_v1.WhoAmIResponse.prototype.getPasswdSalt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPasswdSalt()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.WhoAmIResponse} returns this
 */
proto.alice_v1.WhoAmIResponse.prototype.setPasswdSalt = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes priv_key_enc = 3;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.WhoAmIResponse.prototype.getPrivKeyEnc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes priv_key_enc = 3;
 * This is a type-conversion wrapper around `getPrivKeyEnc()`
 * @return {string}
 */
proto.alice_v1.WhoAmIResponse.prototype.getPrivKeyEnc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrivKeyEnc()));
};


/**
 * optional bytes priv_key_enc = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrivKeyEnc()`
 * @return {!Uint8Array}
 */
proto.alice_v1.WhoAmIResponse.prototype.getPrivKeyEnc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrivKeyEnc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.WhoAmIResponse} returns this
 */
proto.alice_v1.WhoAmIResponse.prototype.setPrivKeyEnc = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes pub_key = 4;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.WhoAmIResponse.prototype.getPubKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes pub_key = 4;
 * This is a type-conversion wrapper around `getPubKey()`
 * @return {string}
 */
proto.alice_v1.WhoAmIResponse.prototype.getPubKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubKey()));
};


/**
 * optional bytes pub_key = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubKey()`
 * @return {!Uint8Array}
 */
proto.alice_v1.WhoAmIResponse.prototype.getPubKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.WhoAmIResponse} returns this
 */
proto.alice_v1.WhoAmIResponse.prototype.setPubKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.alice_v1.Card.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.Card.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.Card.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.Card} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.Card.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    workspaceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    titleEnc: msg.getTitleEnc_asB64(),
    tagsEncList: msg.getTagsEncList_asB64(),
    createdAt: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.Card}
 */
proto.alice_v1.Card.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.Card;
  return proto.alice_v1.Card.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.Card} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.Card}
 */
proto.alice_v1.Card.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkspaceId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTitleEnc(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTagsEnc(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.Card.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.Card.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.Card} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.Card.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWorkspaceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTitleEnc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTagsEncList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.alice_v1.Card.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.alice_v1.Card} returns this
 */
proto.alice_v1.Card.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string workspace_id = 2;
 * @return {string}
 */
proto.alice_v1.Card.prototype.getWorkspaceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.alice_v1.Card} returns this
 */
proto.alice_v1.Card.prototype.setWorkspaceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes title_enc = 3;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.Card.prototype.getTitleEnc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes title_enc = 3;
 * This is a type-conversion wrapper around `getTitleEnc()`
 * @return {string}
 */
proto.alice_v1.Card.prototype.getTitleEnc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTitleEnc()));
};


/**
 * optional bytes title_enc = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTitleEnc()`
 * @return {!Uint8Array}
 */
proto.alice_v1.Card.prototype.getTitleEnc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTitleEnc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.Card} returns this
 */
proto.alice_v1.Card.prototype.setTitleEnc = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated bytes tags_enc = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.alice_v1.Card.prototype.getTagsEncList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * repeated bytes tags_enc = 4;
 * This is a type-conversion wrapper around `getTagsEncList()`
 * @return {!Array<string>}
 */
proto.alice_v1.Card.prototype.getTagsEncList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTagsEncList()));
};


/**
 * repeated bytes tags_enc = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTagsEncList()`
 * @return {!Array<!Uint8Array>}
 */
proto.alice_v1.Card.prototype.getTagsEncList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTagsEncList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.alice_v1.Card} returns this
 */
proto.alice_v1.Card.prototype.setTagsEncList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.alice_v1.Card} returns this
 */
proto.alice_v1.Card.prototype.addTagsEnc = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.alice_v1.Card} returns this
 */
proto.alice_v1.Card.prototype.clearTagsEncList = function() {
  return this.setTagsEncList([]);
};


/**
 * optional string created_at = 5;
 * @return {string}
 */
proto.alice_v1.Card.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.alice_v1.Card} returns this
 */
proto.alice_v1.Card.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.CardItem.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.CardItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.CardItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.CardItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cardId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    titleEnc: msg.getTitleEnc_asB64(),
    bodyEnc: msg.getBodyEnc_asB64(),
    hidden: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.CardItem}
 */
proto.alice_v1.CardItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.CardItem;
  return proto.alice_v1.CardItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.CardItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.CardItem}
 */
proto.alice_v1.CardItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTitleEnc(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBodyEnc(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHidden(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.CardItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.CardItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.CardItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.CardItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCardId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTitleEnc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getBodyEnc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getHidden();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.alice_v1.CardItem.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.alice_v1.CardItem} returns this
 */
proto.alice_v1.CardItem.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string card_id = 2;
 * @return {string}
 */
proto.alice_v1.CardItem.prototype.getCardId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.alice_v1.CardItem} returns this
 */
proto.alice_v1.CardItem.prototype.setCardId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes title_enc = 3;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.CardItem.prototype.getTitleEnc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes title_enc = 3;
 * This is a type-conversion wrapper around `getTitleEnc()`
 * @return {string}
 */
proto.alice_v1.CardItem.prototype.getTitleEnc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTitleEnc()));
};


/**
 * optional bytes title_enc = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTitleEnc()`
 * @return {!Uint8Array}
 */
proto.alice_v1.CardItem.prototype.getTitleEnc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTitleEnc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.CardItem} returns this
 */
proto.alice_v1.CardItem.prototype.setTitleEnc = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes body_enc = 4;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.CardItem.prototype.getBodyEnc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes body_enc = 4;
 * This is a type-conversion wrapper around `getBodyEnc()`
 * @return {string}
 */
proto.alice_v1.CardItem.prototype.getBodyEnc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBodyEnc()));
};


/**
 * optional bytes body_enc = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBodyEnc()`
 * @return {!Uint8Array}
 */
proto.alice_v1.CardItem.prototype.getBodyEnc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBodyEnc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.CardItem} returns this
 */
proto.alice_v1.CardItem.prototype.setBodyEnc = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bool hidden = 5;
 * @return {boolean}
 */
proto.alice_v1.CardItem.prototype.getHidden = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.alice_v1.CardItem} returns this
 */
proto.alice_v1.CardItem.prototype.setHidden = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.UserWithWorkspace.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.UserWithWorkspace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.UserWithWorkspace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.UserWithWorkspace.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ownerId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ownerPubKey: msg.getOwnerPubKey_asB64(),
    workspaceId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    aedKeyEnc: msg.getAedKeyEnc_asB64(),
    aedKeyTag: msg.getAedKeyTag_asB64(),
    titleEnc: msg.getTitleEnc_asB64(),
    createdAt: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.UserWithWorkspace}
 */
proto.alice_v1.UserWithWorkspace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.UserWithWorkspace;
  return proto.alice_v1.UserWithWorkspace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.UserWithWorkspace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.UserWithWorkspace}
 */
proto.alice_v1.UserWithWorkspace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOwnerPubKey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkspaceId(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAedKeyEnc(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAedKeyTag(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTitleEnc(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.UserWithWorkspace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.UserWithWorkspace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.UserWithWorkspace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.UserWithWorkspace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOwnerId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOwnerPubKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getWorkspaceId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAedKeyEnc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getAedKeyTag_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getTitleEnc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.alice_v1.UserWithWorkspace.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.alice_v1.UserWithWorkspace} returns this
 */
proto.alice_v1.UserWithWorkspace.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.alice_v1.UserWithWorkspace.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.alice_v1.UserWithWorkspace} returns this
 */
proto.alice_v1.UserWithWorkspace.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string owner_id = 3;
 * @return {string}
 */
proto.alice_v1.UserWithWorkspace.prototype.getOwnerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.alice_v1.UserWithWorkspace} returns this
 */
proto.alice_v1.UserWithWorkspace.prototype.setOwnerId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes owner_pub_key = 4;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.UserWithWorkspace.prototype.getOwnerPubKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes owner_pub_key = 4;
 * This is a type-conversion wrapper around `getOwnerPubKey()`
 * @return {string}
 */
proto.alice_v1.UserWithWorkspace.prototype.getOwnerPubKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOwnerPubKey()));
};


/**
 * optional bytes owner_pub_key = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwnerPubKey()`
 * @return {!Uint8Array}
 */
proto.alice_v1.UserWithWorkspace.prototype.getOwnerPubKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOwnerPubKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.UserWithWorkspace} returns this
 */
proto.alice_v1.UserWithWorkspace.prototype.setOwnerPubKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string workspace_id = 5;
 * @return {string}
 */
proto.alice_v1.UserWithWorkspace.prototype.getWorkspaceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.alice_v1.UserWithWorkspace} returns this
 */
proto.alice_v1.UserWithWorkspace.prototype.setWorkspaceId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes aed_key_enc = 6;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.UserWithWorkspace.prototype.getAedKeyEnc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes aed_key_enc = 6;
 * This is a type-conversion wrapper around `getAedKeyEnc()`
 * @return {string}
 */
proto.alice_v1.UserWithWorkspace.prototype.getAedKeyEnc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAedKeyEnc()));
};


/**
 * optional bytes aed_key_enc = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAedKeyEnc()`
 * @return {!Uint8Array}
 */
proto.alice_v1.UserWithWorkspace.prototype.getAedKeyEnc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAedKeyEnc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.UserWithWorkspace} returns this
 */
proto.alice_v1.UserWithWorkspace.prototype.setAedKeyEnc = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes aed_key_tag = 7;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.UserWithWorkspace.prototype.getAedKeyTag = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes aed_key_tag = 7;
 * This is a type-conversion wrapper around `getAedKeyTag()`
 * @return {string}
 */
proto.alice_v1.UserWithWorkspace.prototype.getAedKeyTag_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAedKeyTag()));
};


/**
 * optional bytes aed_key_tag = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAedKeyTag()`
 * @return {!Uint8Array}
 */
proto.alice_v1.UserWithWorkspace.prototype.getAedKeyTag_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAedKeyTag()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.UserWithWorkspace} returns this
 */
proto.alice_v1.UserWithWorkspace.prototype.setAedKeyTag = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes title_enc = 8;
 * @return {!(string|Uint8Array)}
 */
proto.alice_v1.UserWithWorkspace.prototype.getTitleEnc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes title_enc = 8;
 * This is a type-conversion wrapper around `getTitleEnc()`
 * @return {string}
 */
proto.alice_v1.UserWithWorkspace.prototype.getTitleEnc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTitleEnc()));
};


/**
 * optional bytes title_enc = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTitleEnc()`
 * @return {!Uint8Array}
 */
proto.alice_v1.UserWithWorkspace.prototype.getTitleEnc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTitleEnc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.alice_v1.UserWithWorkspace} returns this
 */
proto.alice_v1.UserWithWorkspace.prototype.setTitleEnc = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional string created_at = 9;
 * @return {string}
 */
proto.alice_v1.UserWithWorkspace.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.alice_v1.UserWithWorkspace} returns this
 */
proto.alice_v1.UserWithWorkspace.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.alice_v1.ListCardsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.ListCardsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.ListCardsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.ListCardsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.ListCardsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.alice_v1.Card.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.ListCardsResponse}
 */
proto.alice_v1.ListCardsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.ListCardsResponse;
  return proto.alice_v1.ListCardsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.ListCardsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.ListCardsResponse}
 */
proto.alice_v1.ListCardsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.alice_v1.Card;
      reader.readMessage(value,proto.alice_v1.Card.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.ListCardsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.ListCardsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.ListCardsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.ListCardsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.alice_v1.Card.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Card items = 1;
 * @return {!Array<!proto.alice_v1.Card>}
 */
proto.alice_v1.ListCardsResponse.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.alice_v1.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.alice_v1.Card, 1));
};


/**
 * @param {!Array<!proto.alice_v1.Card>} value
 * @return {!proto.alice_v1.ListCardsResponse} returns this
*/
proto.alice_v1.ListCardsResponse.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.alice_v1.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.alice_v1.Card}
 */
proto.alice_v1.ListCardsResponse.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.alice_v1.Card, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.alice_v1.ListCardsResponse} returns this
 */
proto.alice_v1.ListCardsResponse.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.alice_v1.ListCardItemsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alice_v1.ListCardItemsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.alice_v1.ListCardItemsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alice_v1.ListCardItemsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.ListCardItemsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.alice_v1.CardItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alice_v1.ListCardItemsResponse}
 */
proto.alice_v1.ListCardItemsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alice_v1.ListCardItemsResponse;
  return proto.alice_v1.ListCardItemsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alice_v1.ListCardItemsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alice_v1.ListCardItemsResponse}
 */
proto.alice_v1.ListCardItemsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.alice_v1.CardItem;
      reader.readMessage(value,proto.alice_v1.CardItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alice_v1.ListCardItemsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alice_v1.ListCardItemsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alice_v1.ListCardItemsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alice_v1.ListCardItemsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.alice_v1.CardItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CardItem items = 1;
 * @return {!Array<!proto.alice_v1.CardItem>}
 */
proto.alice_v1.ListCardItemsResponse.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.alice_v1.CardItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.alice_v1.CardItem, 1));
};


/**
 * @param {!Array<!proto.alice_v1.CardItem>} value
 * @return {!proto.alice_v1.ListCardItemsResponse} returns this
*/
proto.alice_v1.ListCardItemsResponse.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.alice_v1.CardItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.alice_v1.CardItem}
 */
proto.alice_v1.ListCardItemsResponse.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.alice_v1.CardItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.alice_v1.ListCardItemsResponse} returns this
 */
proto.alice_v1.ListCardItemsResponse.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * @enum {number}
 */
proto.alice_v1.SrpStage = {
  SRP_STAGE_UNKNOWN: 0,
  SRP_STAGE_AUTH0: 1,
  SRP_STAGE_AUTH1: 2,
  SRP_STAGE_AUTH2: 3
};

goog.object.extend(exports, proto.alice_v1);
